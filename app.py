import streamlit as st
import pandas as pd
import json
import random
from pages.rebalance_calc_page import RebalanceCalculator
from pages.moex_clien_page import MoexClient
from pages.portfolio_page import Portfolio

st.set_page_config(page_title="–ü–æ—Ä—Ç—Ñ–µ–ª—å", layout="wide")
st.title("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π")

json_file_path = "portfolio_data.json"

# ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON =====
def load_portfolio():
    try:
        with open(json_file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_portfolio(data):
    with open(json_file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
if "portfolio_data" not in st.session_state:
    st.session_state.portfolio_data = load_portfolio()

if "update_flag" not in st.session_state:
    st.session_state.update_flag = False

portfolio_data = st.session_state.portfolio_data

# ===== –í–≤–æ–¥ —Ç–∏–∫–µ—Ä–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) =====
tickers_input = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER, LKOH):",
    value=",".join(portfolio_data.keys()) if portfolio_data else "SBER, LKOH"
)
input_tickers = [t.strip().upper() for t in tickers_input.split(",") if t.strip()]

# ===== –í–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞ =====
deposit = st.number_input("üí∞ –í–Ω–µ—Å–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ —Å—á–µ—Ç:", min_value=0, step=1000)

# ===== –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å) =====
saved_tickers = list(st.session_state.portfolio_data.keys()) if st.session_state.portfolio_data else []
combined_tickers = sorted(set(input_tickers) | set(saved_tickers))

# ===== –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å MOEX –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ =====
moex_client = MoexClient()
try:
    raw_moex = moex_client.fetch_data(combined_tickers) or {}
except Exception as e:
    raw_moex = {}
    st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å MOEX: {e}")

# ===== –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ moex_data –∏–º–µ–µ—Ç –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö combined_tickers (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö) =====
moex_data = {}
for t in combined_tickers:
    if t in raw_moex and isinstance(raw_moex[t], dict):
        moex_data[t] = raw_moex[t]
    else:
        # –∑–∞–≥–ª—É—à–∫–∞ ‚Äî —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        moex_data[t] = {"LAST": None, "ISSUECAPITALIZATION": 0}

if not moex_data and combined_tickers:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å MOEX –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.")
    st.stop()

# ===== –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è =====
user_inputs = {ticker: portfolio_data.get(ticker, {"qty": 0, "invested": 0.0}) for ticker in combined_tickers}
portfolio = Portfolio(combined_tickers, moex_data, user_inputs)

# –†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏–π
total_invested = deposit + sum(
    ticker_data.get("invested", 0) for ticker_data in st.session_state.portfolio_data.values()
)

# –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
current_value = portfolio._calculate_portfolio_total()

# –†–∞—Å—Å—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
if total_invested > 0:
    profit_percentage = ((current_value - total_invested) / total_invested) * 100
else:
    profit_percentage = 0.0

# –†–∞—Å—Å—á–∏—Ç–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
profit_amount = current_value - total_invested
color_profit = "green" if profit_percentage >= 0 else "red"
color_amount = "green" if profit_amount >= 0 else "red"

st.markdown(f"<h3 style='color:{color_profit}'>üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {profit_percentage:.2f}%</h3>", unsafe_allow_html=True)
st.subheader(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤–ª–æ–∂–µ–Ω–∏–π: {total_invested:,.2f} ‚ÇΩ")
st.subheader(f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio._calculate_portfolio_total():,.2f} ‚ÇΩ")
st.markdown(f"<h3 style='color:{color_amount}'>‚ûï –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_amount:,.2f} ‚ÇΩ</h3>", unsafe_allow_html=True)

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã =====
def get_portfolio_table(portfolio, deposit, history=None):
    rows = []
    total_value = portfolio._calculate_portfolio_total() + deposit

    import datetime
    history_file = "portfolio_history.json"

    def load_history():
        try:
            with open(history_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_history(data):
        with open(history_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    history = load_history()
    today = datetime.date.today().isoformat()

    if not any(entry["date"] == today for entry in history):
        history.append({
            "date": today,
            "portfolio_value": portfolio._calculate_portfolio_total(),
            "total_with_deposit": total_value
        })
        save_history(history)

    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    if history:
        import altair as alt
        df_hist = pd.DataFrame(history)
        df_hist["date"] = pd.to_datetime(df_hist["date"])
        df_hist = df_hist.sort_values("date")

        st.write("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥:")
        period = st.segmented_control(
            "–ü–µ—Ä–∏–æ–¥",
            options=["7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "–í—Å–µ –≤—Ä–µ–º—è"],
            default="30 –¥–Ω–µ–π"
        )

        if period != "–í—Å–µ –≤—Ä–µ–º—è":
            days = int(period.split()[0])
            cutoff_date = pd.Timestamp.today() - pd.Timedelta(days=days)
            df_filtered = df_hist[df_hist["date"] >= cutoff_date]
        else:
            df_filtered = df_hist.copy()

        base = alt.Chart(df_filtered).encode(
            x=alt.X("date:T", title="–î–∞—Ç–∞"),
            tooltip=[
                alt.Tooltip("date:T", title="–î–∞—Ç–∞"),
                alt.Tooltip("portfolio_value:Q", title="–ü–æ—Ä—Ç—Ñ–µ–ª—å (‚ÇΩ)", format=",.0f"),
                alt.Tooltip("total_with_deposit:Q", title="–° –¥–µ–ø–æ–∑–∏—Ç–æ–º (‚ÇΩ)", format=",.0f")
            ]
        )

        line_portfolio = base.mark_line(color="#1f77b4", strokeWidth=2).encode(
            y=alt.Y("portfolio_value:Q", title="–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)")
        )

        line_total = base.mark_line(color="#2ca02c", strokeDash=[5, 3], strokeWidth=2).encode(
            y="total_with_deposit:Q"
        )

        chart = alt.layer(line_portfolio, line_total).properties(
            width="container",
            height=350,
            title=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è ({period.lower()})"
        ).interactive(bind_y=False)

        st.altair_chart(chart, use_container_width=True)

        if len(df_filtered) >= 2:
            start_val = df_filtered.iloc[0]["portfolio_value"]
            end_val = df_filtered.iloc[-1]["portfolio_value"]
            change_rub = end_val - start_val
            change_pct = (change_rub / start_val * 100) if start_val > 0 else 0

            start_total = df_filtered.iloc[0]["total_with_deposit"]
            end_total = df_filtered.iloc[-1]["total_with_deposit"]
            change_total_rub = end_total - start_total
            change_total_pct = (change_total_rub / start_total * 100) if start_total > 0 else 0

            days_diff = (df_filtered.iloc[-1]["date"] - df_filtered.iloc[0]["date"]).days
            avg_daily_return = (change_pct / days_diff) if days_diff > 0 else 0
            avg_daily_total_return = (change_total_pct / days_diff) if days_diff > 0 else 0

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("#### üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞)")
                color = "green" if change_rub > 0 else ("red" if change_rub < 0 else "gray")
                st.markdown(
                    f"<span style='font-size:22px; color:{color}'>{change_rub:,.2f} ‚ÇΩ ({change_pct:+.2f}%)</span>",
                    unsafe_allow_html=True
                )

            with col2:
                st.markdown("#### üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º")
                color = "green" if change_total_rub > 0 else ("red" if change_total_rub < 0 else "gray")
                st.markdown(
                    f"<span style='font-size:22px; color:{color}'>{change_total_rub:,.2f} ‚ÇΩ ({change_total_pct:+.2f}%)</span>",
                    unsafe_allow_html=True
                )

            with col3:
                st.markdown("#### üìà –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å")
                avg_color = "green" if avg_daily_total_return > 0 else ("red" if avg_daily_total_return < 0 else "gray")
                st.markdown(
                    f"<span style='font-size:22px; color:{avg_color}'>{avg_daily_total_return:+.2f}%/–¥–µ–Ω—å</span>",
                    unsafe_allow_html=True
                )

            df_filtered["daily_change_pct"] = df_filtered["portfolio_value"].pct_change() * 100
            df_filtered = df_filtered.dropna(subset=["daily_change_pct"])

            st.markdown("### üìä –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            bar_chart = alt.Chart(df_filtered).mark_bar().encode(
                x=alt.X("date:T", title="–î–∞—Ç–∞"),
                y=alt.Y("daily_change_pct:Q", title="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å (%)"),
                color=alt.condition(
                    alt.datum.daily_change_pct > 0,
                    alt.value("#2ca02c"),
                    alt.value("#d62728")
                ),
                tooltip=[
                    alt.Tooltip("date:T", title="–î–∞—Ç–∞"),
                    alt.Tooltip("daily_change_pct:Q", title="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", format="+.2f")
                ]
            ).properties(height=180, width="container")

            st.altair_chart(bar_chart, use_container_width=True)

        else:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–Ω–∞ –Ω–∞—á–Ω—ë—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è.")

    # ===== –ò—Å–ø–æ–ª—å–∑—É–µ–º combined_tickers –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ =====
    for ticker in combined_tickers:
        data = moex_data.get(ticker, {})
        last_price = data.get("LAST") or 0
        inputs = portfolio_data.get(ticker, {"qty": 0, "invested": 0.0})
        qty = inputs.get("qty", 0)
        current_value = last_price * qty if last_price else 0
        portfolio_percent = (current_value / total_value * 100) if total_value > 0 else 0
        cap_percent = (data.get("ISSUECAPITALIZATION", 0) / portfolio.total_cap * 100
                       if data.get("ISSUECAPITALIZATION") and portfolio.total_cap > 0 else 0)

        action, buy_qty, buy_amount = RebalanceCalculator.calculate_rebalance(
            {
                "portfolio_percent": portfolio_percent,
                "cap_percent": cap_percent,
                "last_price": last_price,
                "qty": qty
            },
            total_value,
            portfolio.total_cap,
            deposit
        )

        rows.append([
            ticker,
            qty,
            last_price,
            current_value,
            f"{portfolio_percent:.2f}%",
            f"{cap_percent:.2f}%" if cap_percent else "N/A",
            action,
            buy_qty,
            buy_amount
        ])

    df = pd.DataFrame(rows, columns=[
        "–¢–∏–∫–µ—Ä", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–î–æ–ª—è, %", "–ö–∞–ø.–¥–æ–ª—è, %", "–î–µ–π—Å—Ç–≤–∏–µ", "–ö—É–ø–∏—Ç—å —à—Ç", "–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏"
    ])
    return df, total_value

# ===== –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–¥–æ–∫—É–ø–∫–∏ –±—É–º–∞–≥–∏ =====
st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–¥–æ–∫—É–ø–∫–∞ –±—É–º–∞–≥–∏")

# –í–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞ –≤–Ω–µ —Ñ–æ—Ä–º—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã)
new_ticker = st.text_input("üé´ –¢–∏–∫–µ—Ä", value="", help="–ü—Ä–∏–º–µ—Ä: SBER, LKOH").strip().upper()

current_price = None
if new_ticker:
    try:
        tmp_raw = moex_client.fetch_data([new_ticker]) or {}
        tmp = tmp_raw.get(new_ticker, {})
        current_price = tmp.get("LAST")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å MOEX: {e}")

if current_price is not None:
    st.info(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {new_ticker}: {current_price:,.2f} ‚ÇΩ")
else:
    if new_ticker:
        st.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å —Ç–∏–∫–µ—Ä.")

with st.form(key="add_stock_form"):
    new_price = st.number_input(
        "üíµ –¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é",
        min_value=0.01,
        value=float(current_price) if current_price else 0.01,
        step=0.01
    )

    new_qty = st.number_input("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, step=1)
    submit_button = st.form_submit_button("üíº –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å")

if submit_button:
    if not new_ticker:
        st.error("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä")
    elif new_qty <= 0:
        st.error("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    elif new_price <= 0:
        st.error("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    else:
        total_invested_for_security = new_price * new_qty

        if new_ticker in st.session_state.portfolio_data:
            existing = st.session_state.portfolio_data[new_ticker]
            st.session_state.portfolio_data[new_ticker] = {
                "qty": existing["qty"] + new_qty,
                "invested": existing["invested"] + total_invested_for_security
            }
        else:
            st.session_state.portfolio_data[new_ticker] = {
                "qty": new_qty,
                "invested": total_invested_for_security
            }

        save_portfolio(st.session_state.portfolio_data)
        st.success(f"‚úÖ {new_qty} —à—Ç. {new_ticker} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞ {total_invested_for_security:,.2f} ‚ÇΩ")
        st.session_state.update_flag = True

# ===== –ï—Å–ª–∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º moex_data –∏ –æ–±—ä–µ–∫—Ç Portfolio =====
if st.session_state.update_flag:
    portfolio_data = st.session_state.portfolio_data
    saved_tickers = list(portfolio_data.keys()) if portfolio_data else []
    input_tickers = [t.strip().upper() for t in tickers_input.split(",") if t.strip()]
    combined_tickers = sorted(set(input_tickers) | set(saved_tickers))

    try:
        raw_moex = moex_client.fetch_data(combined_tickers) or {}
    except Exception as e:
        raw_moex = {}
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å MOEX: {e}")

    # —Å–Ω–æ–≤–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º moex_data —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏
    moex_data = {}
    for t in combined_tickers:
        moex_data[t] = raw_moex.get(t, {"LAST": None, "ISSUECAPITALIZATION": 0})

    user_inputs = {ticker: portfolio_data.get(ticker, {"qty": 0, "invested": 0.0}) for ticker in combined_tickers}
    portfolio = Portfolio(combined_tickers, moex_data, user_inputs)
    st.session_state.update_flag = False

# ===== –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è =====
df, total_value = get_portfolio_table(portfolio, deposit)
st.dataframe(df.style.format({"–¶–µ–Ω–∞": "{:,.2f}", "–°—Ç–æ–∏–º–æ—Å—Ç—å": "{:,.2f}", "–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏": "{:,.2f}"}))

st.subheader(f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio._calculate_portfolio_total():,.2f} ‚ÇΩ")
st.subheader(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {total_value:,.2f} ‚ÇΩ")
